install_copy() {
	src=$1
	dst=$2
	cp -f $src $dst
	chmod +r $dst
}

remove_link() {
	dst=$1
	if [ -h $dst ]; then
		rm -f $dst
	fi
}

install_link() {
	src=$1
	dst=$2
	ln -sf $src $dst
	echo "DEPRECATED FUNCTION install_link - USE install_copy INSTEAD (linked $src to $dst)"
}

install_customize() {
	src=$1
	dst=$2
	cat $src |sed s/%%host%%/`hostname`/g >$dst
}

install_deb() {
	pkg=$1
	echo "checking for debian package $pkg"
	if [ "`dpkg -l $pkg 2>/dev/null |grep ^ii`" = "" ]; then
		echo "installing package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			apt-get install -y $pkg
		else
			apt-get install $pkg
		fi
	fi
}

install_rpm() {
	pkg=$1
	echo "checking for rpm package $pkg"
	if ! rpm --quiet -q $pkg; then
		echo "installing package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			yum install -y $pkg
		else
			yum install $pkg
		fi
	fi
}

install_suse() {
	pkg=$1
	echo "checking for suse package $pkg"
	if ! rpm --quiet -q $pkg; then
		echo "installing package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			aptitude install -y $pkg
		else
			aptitude install $pkg
		fi
	fi
}

install_pkg() {
	pkg=$1
	echo "checking for freebsd package $pkg"
	if [ "`pkg info |grep ^$pkg-`" = "" ]; then
		echo "installing package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			pkg install -y $pkg
		else
			pkg install $pkg
		fi
	fi
}

install_pkgin() {
	pkg=$1
	echo "checking for netbsd package $pkg"
	if [ "`pkgin list |grep ^$pkg-`" = "" ]; then
		echo "installing package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			pkgin -y install $pkg
		else
			pkgin install $pkg
		fi
	fi
}

uninstall_deb() {
	pkg=$1
	if [ "`dpkg -l $pkg 2>/dev/null |egrep \"^(ii|rc)\"`" != "" ]; then
		echo "uninstalling package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			apt-get purge -y $pkg
		else
			apt-get purge $pkg
		fi
	fi
}

uninstall_rpm() {
	pkg=$1
	if rpm --quiet -q $pkg; then
		echo "uninstalling package $pkg"
		rpm -e $pkg
	fi
}

uninstall_pkg() {
	pkg=$1
	if [ "`pkg info |grep ^$pkg-`" != "" ]; then
		echo "uninstalling package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			pkg delete -y $pkg
		else
			pkg delete $pkg
		fi
	fi
}

uninstall_pkgin() {
	pkg=$1
	if [ "`pkgin list |grep ^$pkg-`" != "" ]; then
		echo "uninstalling package $pkg"
		if [ "$SF_UNATTENDED" != "" ]; then
			pkgin -y remove $pkg
		else
			pkgin remove $pkg
		fi
	fi
}

install_cpan() {
	pkg=$1
	echo "checking for perl package $pkg"
	if [ "`perl -e \"use $pkg \" 2>&1`" != "" ]; then
		echo "installing package $pkg"
		cpan -fi $pkg
	fi
}

save_original_config() {
	file=$1
	if [ ! -f $file.farmer-orig ]; then
		cp $file $file.farmer-orig
	fi
}
